

/* https://flexbox.malven.co/ */
/* https://css-tricks.com/snippets/css/a-guide-to-flexbox/#basics-and-terminology */

.flexbox-container-1
{
    display: flex; /* or inline-flex */
    /* flex | inline-flex */
    /*
    This defines a flex container; inline or block depending on the given value.
    It enables a flex context for all its direct children.
    */
    
    flex-direction: row;
    /* row | row-reverse | column | column-reverse; */
    /*
    This establishes the main-axis.
    Thus defining the direction flex items are placed in the flex container.
    Flexbox is (aside from optional wrapping) a single-direction layout concept.
    Think of flex items as primarily laying out either in horizontal rows or vertical columns.
    */
    
    flex-wrap: nowrap;
    /* nowrap | wrap | wrap-reverse; */
    /*
    Wraps items if they can't all be made to fit on one line.
    You can change that and allow the items to wrap as needed with this property.
    */
    
    flex-flow: column wrap;
    /* row nowrap | column wrap; */
    /*
    This is a shorthand for the flex-direction and flex-wrap properties, which together define the flex container’s main and cross axes.
    The default value is row nowrap.
    */
    
    justify-content: flex-start;
    /* flex-start | flex-end | center; */
    /*
    This defines the alignment along the main axis.
    It helps distribute extra free space leftover when either all the flex items on a line are inflexible,
    or are flexible but have reached their maximum size.
    It also exerts some control over the alignment of items when they overflow the line.
    */
    
    align-items: stretch;
    /* stretch | flex-start | flex-end | center | baseline; */
    /*
    This defines the default behavior for how flex items are laid out along the cross axis on the current line.
    Think of it as the justify-content version for the cross-axis (perpendicular to the main-axis).
    */

    align-content: flex-start;
    /* flex-start | flex-end | center | space-between | space-around | space-evenly | stretch; */
    /* This aligns a flex container’s lines within when there is extra space in the cross-axis,
    similar to how justify-content aligns individual items within the main-axis. */

    gap: 10px;
    gap: 10px 20px; /* row-gap column gap  */
    row-gap: 10px;
    column-gap: 20px;
    /*
    The gap property explicitly controls the space between flex items.
    It applies that spacing only between items not on the outer edges.
    */
}

.flexbox-item-1
{
    order: 0;
    /* default is 0 */
    /*
    By default, flex items are laid out in the source order.
    However, the order property controls the order in which they appear in the flex container.
    */

    flex-grow: 0;
    /* default 0 */
    /*
    If all items have flex-grow set to 1, the remaining space in the container will be distributed equally to all children.
    If one of the children has a value of 2, the remaining space would take up twice as much space as the others (or it will try to, at least).
    */


    flex-shrink: 1;
    /* default 1 */
    /*
    This defines the ability for a flex item to shrink if necessary.
    */

    flex-basis: auto;
    /* default auto */
    /*
    This defines the default size of an element before the remaining space is distributed.
    It can be a length (e.g. 20%, 5rem, etc.) or a keyword.
    The auto keyword means “look at my width or height property” (which was temporarily done by the main-size keyword until deprecated).
    */

    flex: none;
    /* none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ] */
    /*
    This is the shorthand for flex-grow, flex-shrink and flex-basis combined.
    The second and third parameters (flex-shrink and flex-basis) are optional.
    The default is 0 1 auto, but if you set it with a single number value, it’s like 1 0.
    */

    align-self: auto;
    /* auto | flex-start | flex-end | center | baseline | stretch; */
    /*
    This allows the default alignment (or the one specified by align-items) to be overridden for individual flex items.
    */
}